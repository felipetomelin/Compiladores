package com.example.teste.gals;

public interface ParserConstants
{
    int START_SYMBOL = 36;

    int FIRST_NON_TERMINAL    = 36;
    int FIRST_SEMANTIC_ACTION = 69;

    int[][] PARSER_TABLE =
    {
        { -1, -1,  0, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1 },
        { -1, -1, -1, -1,  1, -1, -1, -1, -1,  1,  1,  1,  1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1,  1 },
        { -1, -1, -1,  2,  3, -1, -1, -1, -1,  3,  3,  3,  3, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1,  3 },
        { -1, -1, -1, -1,  7, -1, -1, -1, -1,  5,  6,  6,  8, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1,  4 },
        { -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 16 },
        { -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 18, 17, 17, -1, -1, -1, -1, -1, -1 },
        { -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 19 },
        { -1, -1, -1, -1, -1, -1, -1, -1, -1, 20, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1 },
        { -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 25, 26, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1 },
        { -1, -1, -1, -1, 30, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1 },
        { -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 38, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1 },
        { -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 40, 39, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1 },
        { -1, -1, -1, -1, -1, -1, -1, 41, 41, -1, -1, -1, -1, -1, -1, -1, -1, 41, -1, -1, -1, -1, 41, 41, -1, -1, -1, -1, -1, 41, -1, 41, 41, 41, 41 },
        { -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 21, 22 },
        { -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 23, -1, -1, -1, 24, -1, -1, -1, -1 },
        { -1, -1, -1, -1, -1, -1, -1, 27, 27, -1, -1, -1, -1, -1, -1, -1, -1, 27, -1, -1, -1, -1, 27, 27, -1, -1, -1, -1, -1, 27, -1, 27, 27, 27, 27 },
        { -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 29, -1, -1, -1, 28, -1, -1, -1, -1 },
        { -1, -1, -1, -1, 35, -1, -1, -1, -1, 35, 35, 35, 35, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 35 },
        { -1, -1, -1, 36, 37, 36, 36, -1, -1, 37, 37, 37, 37, 36, 36, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 37 },
        { -1, -1, -1, 31, -1, 32, 31, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1 },
        { -1, -1, -1, 34, -1, -1, 33, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1 },
        { -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1,  9, 10, -1, -1, -1, -1, -1, -1 },
        { -1, -1, -1, -1, 14, -1, -1, -1, -1, 12, 13, 13, 15, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 11 },
        { -1, -1, -1, -1, 42, -1, -1, -1, -1, 42, 42, 42, 42, -1, -1, 43, 44, -1, -1, -1, -1, -1, -1, -1, -1, -1, 42, 42, -1, -1, 42, -1, -1, -1, 42 },
        { -1, -1, -1, -1, -1, -1, -1, 47, 46, -1, -1, -1, -1, -1, -1, -1, -1, 48, -1, -1, -1, -1, 45, 45, -1, -1, -1, -1, -1, 45, -1, 45, 45, 45, 45 },
        { -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 49, 49, -1, -1, -1, -1, -1, 49, -1, 49, 49, 49, 49 },
        { -1, -1, -1, -1, 50, -1, -1, -1, -1, 50, 50, 50, 50, -1, -1, 50, 50, -1, 51, 51, 51, 51, -1, -1, -1, -1, 50, 50, -1, -1, 50, -1, -1, -1, 50 },
        { -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 52, 53, 54, 55, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1 },
        { -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 56, 56, -1, -1, -1, -1, -1, 56, -1, 56, 56, 56, 56 },
        { -1, -1, -1, -1, 57, -1, -1, -1, -1, 57, 57, 57, 57, -1, -1, 57, 57, -1, 57, 57, 57, 57, 58, 59, -1, -1, 57, 57, -1, -1, 57, -1, -1, -1, 57 },
        { -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 60, 60, -1, -1, -1, -1, -1, 60, -1, 60, 60, 60, 60 },
        { -1, -1, -1, -1, 61, -1, -1, -1, -1, 61, 61, 61, 61, -1, -1, 61, 61, -1, 61, 61, 61, 61, 61, 61, 62, 63, 61, 61, -1, -1, 61, -1, -1, -1, 61 },
        { -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 69, 70, -1, -1, -1, -1, -1, 68, -1, 65, 66, 67, 64 }
    };

    int[][] PRODUCTIONS = 
    {
        { 169,   3,  37,   4, 170 },
        {  39,  28,  38 },
        {   0 },
        {  37 },
        {  40,  57 },
        {  43 },
        {  44 },
        {  45 },
        {  46 },
        { 171 },
        {  29,  48, 172 },
        {  42 },
        {  43 },
        {  44 },
        {  45 },
        {  46 },
        {  35, 173,  41 },
        {   0 },
        {  27,  40 },
        {  40,  29,  48, 172 },
        {  10,  30,  49,  31 },
        {  34, 175,  27,  35,  50 },
        {  35, 174,  50 },
        {  27,  49 },
        {   0 },
        {  11,  30,  51,  31 },
        {  12,  30,  51,  31 },
        {  48, 177,  52 },
        {   0 },
        {  27,  51 },
        {   5,  48, 178,  53,  55, 179,  56, 180,   4 },
        {   0 },
        { 179,   6,  48, 181,  53,  55 },
        {   7,  53 },
        {   0 },
        {  58,  28,  54 },
        {   0 },
        {  53 },
        { 182,  13,  53,  47 },
        {  15,  48, 183 },
        {  14,  48, 184 },
        {  60,  59 },
        {   0 },
        {  16,  60, 185,  59 },
        {  17,  60, 186,  59 },
        {  61 },
        {   9, 187 },
        {   8, 188 },
        {  18,  60, 189 },
        {  64,  62 },
        {   0 },
        {  63, 190,  64, 191 },
        {  19 },
        {  20 },
        {  21 },
        {  22 },
        {  66,  65 },
        {   0 },
        {  23,  66, 192,  65 },
        {  24,  66, 193,  65 },
        {  68,  67 },
        {   0 },
        {  25,  68, 194,  67 },
        {  26,  68, 195,  67 },
        {  35, 196 },
        {  32, 197 },
        {  33, 198 },
        {  34, 199 },
        {  30,  48,  31 },
        {  23,  68 },
        {  24,  68, 200 }
    };

    String[] PARSER_ERROR =
        {
            "",
            "esperado EOF",
            "esperado res",
            "esperado main",
            "esperado end",
            "esperado if",
            "esperado elif",
            "esperado else",
            "esperado false",
            "esperado true",
            "esperado read",
            "esperado write",
            "esperado writeln",
            "esperado repeat",
            "esperado until",
            "esperado while",
            "esperado \"&&\"",
            "esperado \"||\"",
            "esperado \"!\"",
            "esperado \"==\"",
            "esperado \"!=\"",
            "esperado \"<\"",
            "esperado \">\"",
            "esperado \"+\"",
            "esperado \"-\"",
            "esperado \"*\"",
            "esperado \"/\"",
            "esperado \",\"",
            "esperado \";\"",
            "esperado \"=\"",
            "esperado \"(\"",
            "esperado \")\"",
            "esperado constante_int",
            "esperado constante_float",
            "esperado constante_string",
            "esperado identificador",
            //"<program> inválido",
            "esperando main",
            //"<lista_de_instrucoes> inválido",
            "esperado identificador read write writeln if repeat",
            //"<lista_de_instrucoes1> inválido",
            "esperado identificador read write writeln if repeat end",
            //"<instrucao> inválido",
            "esperado identificador read write writeln if repeat",
            //"<lista_de_identificadores> inválido",
            "esperado identificador",
            //"<lista_de_identificadores1> inválido",
            " esperado , ; =",
            //"<atribuicao> inválido",
            "esperado identificador",
            //"<entrada_dados> inválido",
            "esperado read",
            //"<saida_dados> inválido",
            "esperado write writeln",
            //"<selecao> inválido",
            "esperado if",
            //"<repeticao> inválido",
            "esperado repeat",
            //"<repeticao1> inválido",
            "esperado until while",
            //"<expressao> inválido",
            "esperado expressao",
            //"<lista_entrada> inválido",
            "esperando identificador const_str",
            //"<lista_entrada1> inválido",
            "esperado , )",
            //"<lista_de_expressoes> inválido",
            "esperado expressão",
            //"<lista_de_expressoes1> inválido",
            "esperado expressão",
            //"<lista_comandos> inválido",
            "esperado identificador if read write writeln repeat",
            //"<lista_comandos1> inválido",
            "esperado identificador end if elif false read write writeln repeat until while",
            //"<elif_exp> inválido",
            "esperado end elif else",
            //"<else_exp> inválido",
            "esperado end else",
            //"<instrucao1> inválido",
            "esperado ; =",
            //"<comando> inválido",
            "esperado identificador if read write writeln repeat",
            //"<expressao1> inválido",
            "esperado expressão",
            //"<elemento> inválido",
            "esperado expressão",
            //"<relacional> inválido",
            "esperado expressão",
            //"<relacional1> inválido",
            "esperado expressão",
            //"<operador_relacional> inválido",
            "esperado == < > !=",
            //"<aritmetica> inválido",
            "esperado expressão",
            //"<aritmetica1> inválido",
            "esperado expressão",
            //"<termo> inválido",
            "esperado expressão",
            //"<termo1> inválido",
            "esperado expressão",
            //"<fator> inválido"
            "esperado expressão"
        };
}
